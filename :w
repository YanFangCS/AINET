import torch
import torch.nn as nn
from torch.nn.init import kaiming_normal_, constant_
from .model_util import *
from train_util import *

# define the function includes in import *
__all__ = [
    'SpixelNet1l','SpixelNet1l_bn'
]


class SpixelNet(nn.Module):
    expansion = 1

    def __init__(self,dataset='', batchNorm=True, train=False):
        super(SpixelNet,self).__init__()
        if dataset == 'ISIC_2017' or dataset=='BDS500':
            input_chs = 3
            class_num = 50
        elif dataset == 'BraTS2017':
            input_chs = 4
        elif dataset == 'ACDC' or dataset == 'TCIA':
            input_chs = 1
        self.train = train
        self.class_num = class_num
        #input_chs = 4
        self.batchNorm = batchNorm
        self.assign_ch = 9

        self.conv0a = conv(self.batchNorm, input_chs, 16, kernel_size=3)
        self.conv0b = conv(self.batchNorm, 16, 16, kernel_size=3)

        self.conv1a = conv(self.batchNorm, 16, 32, kernel_size=3, stride=2)
        self.conv1b = conv(self.batchNorm, 32, 32, kernel_size=3)

        self.conv2a = conv(self.batchNorm, 32, 64, kernel_size=3, stride=2)
        self.conv2b = conv(self.batchNorm, 64, 64, kernel_size=3)

        self.conv3a = conv(self.batchNorm, 64, 128, kernel_size=3, stride=2)
        self.conv3b = conv(self.batchNorm, 128, 128, kernel_size=3)

        self.conv4a = conv(self.batchNorm, 128, 256, kernel_size=3, stride=2)
        self.conv4b = conv(self.batchNorm, 256, 256, kernel_size=3)

        self.deconv3 = deconv(256, 128)
        self.conv3_1 = conv(self.batchNorm, 256, 128)
        self.pred_mask3 = predict_mask(128, self.assign_ch)

        self.deconv2 = deconv(128, 64)
        self.conv2_1 = conv(self.batchNorm, 128, 64)
        self.pred_mask2 = predict_mask(64, self.assign_ch)

        self.deconv1 = deconv(64, 32)
        self.conv1_1 = conv(self.batchNorm, 64, 32)
        self.pred_mask1 = predict_mask(32, self.assign_ch)

        self.deconv0 = deconv(32, 16)
        self.conv0_1 = conv(self.batchNorm, 32 , 16)
        self.pred_mask0 = predict_mask(16,self.assign_ch)

        self.softmax = nn.Softmax(1)

        self.patch_local = nn.Sequential(
        nn.Conv2d(32, self.class_num, 3, padding=1),
        nn.BatchNorm2d(self.class_num),
        nn.ReLU(inplace=True),
        nn.Conv2d(self.class_num, self.class_num, 1),
        nn.Softmax(1)
        )
        
        for m in self.modules():
            if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):
                kaiming_normal_(m.weight, 0.1)
                if m.bias is not None:
                    constant_(m.bias, 0)
            elif isinstance(m, nn.BatchNorm2d):
                constant_(m.weight, 1)
                constant_(m.bias, 0)

    def forward(self, x, patch_posi=None, patch_label=None):
        out1 = self.conv0b(self.conv0a(x)) #5*5
        out2 = self.conv1b(self.conv1a(out1)) #11*11
        out3 = self.conv2b(self.conv2a(out2)) #23*23
        out4 = self.conv3b(self.conv3a(out3)) #47*47
        out5 = self.conv4b(self.conv4a(out4)) #95*95

        out_deconv3 = self.deconv3(out5)
        concat3 = torch.cat((out4, out_deconv3), 1)
        out_conv3_1 = self.conv3_1(concat3)

        out_deconv2 = self.deconv2(out_conv3_1)
        concat2 = torch.cat((out3, out_deconv2), 1)
        out_conv2_1 = self.conv2_1(concat2)

        out_deconv1 = self.deconv1(out_conv2_1)
        concat1 = torch.cat((out2, out_deconv1), 1)
        out_conv1_1 = self.conv1_1(concat1)

        out_deconv0 = self.deconv0(out_conv1_1)
        concat0 = torch.cat((out1, out_deconv0), 1)
        out_conv0_1 = self.conv0_1(concat0)
        mask0 = self.pred_mask0(out_conv0_1)
        prob0 = self.softmax(mask0)

        if not self.train:
            return prob0
        else:
            
    def self_attention(self, feat):
        #conduct self attention 
        #feat bs x c x h x w
        bs,c,h,w = feat.shape
        feat_reshape = torch.reshape(feat, (bs, c, -1))
        feat_TransReshape = feat_reshape.permute(0,2,1)
        attn_w = torch.bmm(feat_TransReshape, feat_reshape)
        attn_w = F.softmax(attn_w, dim=-1)

        attn_out = torch.bmm(attn_w, feat_TransReshape)
        return attn_out

    def forward_patches(self, feat_map, patch_posi, patch_label):
        bs, c, h, w = feat_map.shape
        device = feat_map.device
        patch_loss = torch.tensor([0.]).to(device)
        count = 0
        for i in range(bs):
            label = patch_label[i].to(device)
            patches = patch_posi[i]
            
            patch_num = patches.shape[0]
            for k in range(patch_num):
                patch = patches[k]
                patch_label = label[k]
                patch_label = patch_label[None, None, :,:]
                patch_label_1hot = label2one_hot_torch(patch_label, C=50)

                feat_patch = torch.narrow(feat_map, dim=2, patch[0], patch[1])
                feat_patch = torch.narrow(feat_patch, dim=3, patch[2], patch[3])
                feat_out = self.self_attention(feat_patch)

                patch_prob = self.patch_conv(feat_out)
                logits = torch.log(patch_prob +  1e-8)
                
                patch_loss += torch.sum(logits * patch_label_1hot)
                count +=1

        return patch_loss / count

    def weight_parameters(self):
        return [param for name, param in self.named_parameters() if 'weight' in name]

    def bias_parameters(self):
        return [param for name, param in self.named_parameters() if 'bias' in name]


def SpixelNet1l( data=None):
    # Model without  batch normalization
    model = SpixelNet(batchNorm=False)
    if data is not None:
        model.load_state_dict(data['state_dict'])
    return model


def SpixelNet1l_bn(dataset=None,data=None, train=False):
    # model with batch normalization
    model = SpixelNet(dataset=dataset,batchNorm=True, train=train)
    if data is not None:
        model.load_state_dict(data['state_dict'])
    return model
#
